generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AccountData {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model SessionData {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         UserData     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserData {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      AccountData[]
  sessions      SessionData[]
  customer      CustomerData?
}

model VerificationTokenData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AgentData {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  idAgent   String @unique
  userAgent String @unique
}

model CustomerData {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userCustomer String @unique
  tel          String
  urls         URLsData[]
  user         UserData   @relation(fields: [username], references: [username])
  username     String @unique
}

model URLsData {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  v          Int       @map("__v")
  clicks     Int
  date       String
  origUrl    String    @unique
  shortUrl   String
  urlId      String    @unique
  customer   CustomerData? @relation(fields: [customerId], references: [id])
  customerId String?   @db.ObjectId
}

// model AdminData {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   username  String?
//   password  String?
//   name      String?
//   createdAt DateTime @default(now())
//   createdBy String?
//   updateAt  DateTime @updatedAt
//   updateBy  String?
// }

// model UserData {
//   id            String         @id @default(auto()) @map("_id") @db.ObjectId
//   username      String?        @unique
//   password      String?        @unique
//   firstname     String?
//   lastname      String?
//   email         String         @unique
//   emailVerified Boolean        @default(false)
//   tel           String?
//   image         String?
//   createdAt     DateTime       @default(now())
//   createdBy     String
//   updateAt      DateTime       @updatedAt
//   updateBy      String
//   LinkListData  LinkListData[]
//   PaymentData   PaymentData[]
// }

// model LinkListData {
//   id           String    @id @default(auto()) @map("_id") @db.ObjectId
//   title        String?
//   origUrl      String?
//   shortUrl     String?
//   pathShortUrl String?
//   click        Int       @default(0)
//   createdAt    DateTime  @default(now())
//   createdBy    String
//   updateAt     DateTime  @updatedAt
//   updateBy     String
//   user         UserData? @relation(fields: [userId], references: [id])
//   userId       String?   @db.ObjectId
// }

// model PackageData {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   price       Float
//   setlink     String?
//   setQR       String?
//   createdAt   DateTime      @default(now())
//   createdBy   String
//   updateAt    DateTime      @updatedAt
//   updateBy    String
//   PaymentData PaymentData[]
// }

// model PaymentData {
//   id           String       @id @default(auto()) @map("_id") @db.ObjectId
//   purchaseDate DateTime
//   buyDay       DateTime
//   payDay       DateTime
//   createdAt    DateTime     @default(now())
//   createdBy    String
//   updateAt     DateTime     @updatedAt
//   updateBy     String
//   packageData  PackageData? @relation(fields: [packageId], references: [id])
//   packageId    String?      @db.ObjectId
//   user         UserData?    @relation(fields: [userId], references: [id])
//   userId       String?      @db.ObjectId
// }
