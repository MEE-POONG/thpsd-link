generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserData {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  firstname     String?
  lastname      String?
  username      String?       @unique
  email         String?       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  tel           String?
  createdAt     DateTime      @default(now())
  createdBy     String
  updateAt      DateTime      @updatedAt
  updateBy      String
  accounts      AccountData[]
  sessions      SessionData[]
  PaymentData   PaymentData[]
  AdminData     AdminData?
  URLsData      URLsData[]
}

model AdminData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tel       String
  user      UserData @relation(fields: [username], references: [username])
  username  String   @unique
  createdAt DateTime @default(now())
  createdBy String
  updateAt  DateTime @updatedAt
  updateBy  String
}

model AccountData {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  user              UserData @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  createdBy         String
  updateAt          DateTime @updatedAt
  updateBy          String

  @@unique([provider, providerAccountId])
}

model SessionData {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         UserData @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  createdBy    String
  updateAt     DateTime @updatedAt
  updateBy     String
}

model VerificationTokenData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  createdBy  String
  updateAt   DateTime @updatedAt
  updateBy   String

  @@unique([identifier, token])
}

model URLsData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  v         Int      @default(0)
  clicks    Int      @default(0)
  origUrl   String   @unique
  shortUrl  String
  urlId     String   @unique
  user      UserData @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  createdBy String
  updateAt  DateTime @updatedAt
  updateBy  String
}

model PackageData {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  setlink     String?
  setQR       String?
  createdAt   DateTime      @default(now())
  createdBy   String
  updateAt    DateTime      @updatedAt
  updateBy    String
  PaymentData PaymentData[]
}

model PaymentData {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  purchaseDate DateTime
  buyDay       DateTime
  payDay       DateTime
  createdAt    DateTime     @default(now())
  createdBy    String
  updateAt     DateTime     @updatedAt
  updateBy     String
  packageData  PackageData? @relation(fields: [packageId], references: [id])
  packageId    String?      @db.ObjectId
  user         UserData?    @relation(fields: [userId], references: [id])
  userId       String?      @db.ObjectId
}
